
@{
    ViewData["Title"] = "Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    body {
        font-family: 'Montserrat';
    }

    canvas {
        background-color: #85CEBB;
    }

    #title {
        position: absolute;
        bottom: 450px;
        left: 10%;
        width: 900px;
        text-align: left;
        font-size: 4em;
        font-weight: 700;
        color: white;
    }

    h1 {
        font-weight: 700;
        font-size: 2.5em;
    }

    p {
        color: #666;
        font-size: 1.2em;
    }

    #main {
        margin: 100px 10%;
    }

    #whatis {
        margin: 0 auto 200px auto;
        width: 50%;
    }

    section {
        display: flex;
        flex-flow: row-reverse;
        justify-content: space-between;
        margin-bottom: 300px;
        align-items: center;
    }

    section>div {
        width: 40%
    }

    #predictionsBanner {
        width: 50%
    }

    #predictionsBanner img {
        width: 100%;
    }

    .card1{
        height: 350px;
        width: 100%;
        padding: 60px;
        border-radius: 20px;
    }


    /*MOBILE*/
    @@media screen and (max-width: 640px) {

        #main {
            margin: 50px 5%;
        }

        #title {
            top: 150px;
            left: 5%;
            width: 90%;
            text-align: center;
            font-size: 2.2em;
        }

        #main>* {
            width: 100%;
        }

        section {
            flex-flow: column;
        }
        
        section>div {
            width: 100%
        }

        #predictionsBanner {
            width: 100%;
            overflow: hidden;
        }

        #predictionsBanner img {
            width: 140%;
        }

        #predictionsBtn {
            font-size: 1em;
            padding: 10px 20px;
        }

        h1 {
            font-size: 2em;
        }

        p {
            font-size: 1em;
        }

        .card1 {
            padding: 30px;
        }
    }
</style>

<div>
    <canvas id="canvas"></canvas>
    <div id="title">Fighting dengue using machine learning</div>
</div>

<div id="main">

    <center id="whatis">
        <h1>What is dengue.live?</h1>
        <p>
            Dengue.live provides predictions of future dengue hotspots using machine learning.
            Our goal is to increase awareness and help reduce the spread of Dengue in Singapore.
        </p>
        <a class="btn btn-link btn-lg" href="@Url.Action("About", "Home")">Learn more</a>
    </center>

    <section>
        <div id="predictionsBanner">
            <img src="~/images/predictionsBanner.png" alt="predictions" />
        </div>
        <div>
            <h1 style="margin-bottom: 20px;">Predictions</h1>
            <p>View results from our machine learning model and check if your area is at risk</p>
            <br />
            <a href="@Url.Action("Dashboard", "Home")" class=" btn btn-info">View Predictions</a>
            <a href="@Url.Action("About", "Home")" class="btn btn-outline-secondary">How it works</a>
        </div>
    </section>

    <div class="card1" style="background-color: darkslategrey;">
        <h1 style="color: #85CEBB; margin:0;">Early warning system</h1>
        <p style="color: #EEE; max-width: 600px; margin-top: 10px;">Receive alerts when your location is at risk of becoming a dengue cluster.</p>
        <br />
        <a href="#" style="font-weight:600;" data-toggle="modal" data-target="#ewsModal" class="btn btn-outline-info">More info</a>
    </div>




    <script>
        var canvas = document.getElementById("canvas"),
            ctx = canvas.getContext('2d');
        var stars = [], // Array that contains the stars
            FPS = 60, // Frames per second
            x = 80, // Number of stars
            mouse = {
                x: 0,
                y: 0
            };
        function resize() {
            canvas.width = $("body").prop("clientWidth");
            canvas.height = 800;
            // Mobile view
            if (canvas.width < 640) {
                canvas.height = 500;
                x = 20;
            }
        }
        resize();
        document.querySelector("body").onresize = function () {
            resize();
        }
        for (var i = 0; i < x; i++) {
            stars.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                radius: Math.random() * 1 + 1,
                vx: Math.floor(Math.random() * 50) - 25,
                vy: Math.floor(Math.random() * 50) - 25
            });
        }
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            ctx.globalCompositeOperation = "lighter";

            for (var i = 0, x = stars.length; i < x; i++) {
                var s = stars[i];

                ctx.fillStyle = "#ddd";
                ctx.beginPath();
                ctx.arc(s.x, s.y, s.radius, 0, 2 * Math.PI);
                ctx.fill();
                ctx.fillStyle = 'black';
                ctx.stroke();
            }

            ctx.beginPath();
            for (var i = 0, x = stars.length; i < x; i++) {
                var starI = stars[i];
                ctx.moveTo(starI.x, starI.y);
                if (distance(mouse, starI) < 200) ctx.lineTo(mouse.x, mouse.y);
                for (var j = 0, x = stars.length; j < x; j++) {
                    var starII = stars[j];
                    if (distance(starI, starII) < 175) {
                        ctx.lineTo(starII.x, starII.y);
                    }
                }
            }
            ctx.lineWidth = 0.15;
            ctx.strokeStyle = 'white';
            ctx.stroke();
        }

        function distance(point1, point2) {
            var xs = 0;
            var ys = 0;

            xs = point2.x - point1.x;
            xs = xs * xs;

            ys = point2.y - point1.y;
            ys = ys * ys;

            return Math.sqrt(xs + ys);
        }

        function update() {
            for (var i = 0, x = stars.length; i < x; i++) {
                var s = stars[i];

                s.x += s.vx / FPS;
                s.y += s.vy / FPS;

                if (s.x < 0 || s.x > canvas.width) s.vx = -s.vx;
                if (s.y < 0 || s.y > canvas.height) s.vy = -s.vy;
            }
        }

        canvas.addEventListener('mousemove', function (e) {
            mouse.x = e.clientX;
            mouse.y = e.clientY;
        });

        function tick() {
            draw();
            update();
            requestAnimationFrame(tick);
        }

        tick();
    </script>
